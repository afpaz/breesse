/**
 * Copyright (c) 2016-2019 Ã‰TS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ca.ets.sofeess.breesse.simulink.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import ca.ets.sofeess.breesse.simulink.util.SimulinkAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimulinkItemProviderAdapterFactory extends SimulinkAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimulinkItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.SimulinkModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimulinkModelItemProvider simulinkModelItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.SimulinkModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimulinkModelAdapter() {
		if (simulinkModelItemProvider == null) {
			simulinkModelItemProvider = new SimulinkModelItemProvider(this);
		}

		return simulinkModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.InPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InPortItemProvider inPortItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.InPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInPortAdapter() {
		if (inPortItemProvider == null) {
			inPortItemProvider = new InPortItemProvider(this);
		}

		return inPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.OutPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutPortItemProvider outPortItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.OutPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutPortAdapter() {
		if (outPortItemProvider == null) {
			outPortItemProvider = new OutPortItemProvider(this);
		}

		return outPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.SubSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubSystemItemProvider subSystemItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.SubSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubSystemAdapter() {
		if (subSystemItemProvider == null) {
			subSystemItemProvider = new SubSystemItemProvider(this);
		}

		return subSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.InPortBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InPortBlockItemProvider inPortBlockItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.InPortBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInPortBlockAdapter() {
		if (inPortBlockItemProvider == null) {
			inPortBlockItemProvider = new InPortBlockItemProvider(this);
		}

		return inPortBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.OutPortBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutPortBlockItemProvider outPortBlockItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.OutPortBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutPortBlockAdapter() {
		if (outPortBlockItemProvider == null) {
			outPortBlockItemProvider = new OutPortBlockItemProvider(this);
		}

		return outPortBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Connection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionItemProvider connectionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Connection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionAdapter() {
		if (connectionItemProvider == null) {
			connectionItemProvider = new ConnectionItemProvider(this);
		}

		return connectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Chart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChartItemProvider chartItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChartAdapter() {
		if (chartItemProvider == null) {
			chartItemProvider = new ChartItemProvider(this);
		}

		return chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Junction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JunctionItemProvider junctionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Junction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJunctionAdapter() {
		if (junctionItemProvider == null) {
			junctionItemProvider = new JunctionItemProvider(this);
		}

		return junctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.SFWGuard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SFWGuardItemProvider sfwGuardItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.SFWGuard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSFWGuardAdapter() {
		if (sfwGuardItemProvider == null) {
			sfwGuardItemProvider = new SFWGuardItemProvider(this);
		}

		return sfwGuardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.ConditionTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionTableItemProvider conditionTableItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.ConditionTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionTableAdapter() {
		if (conditionTableItemProvider == null) {
			conditionTableItemProvider = new ConditionTableItemProvider(this);
		}

		return conditionTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.ActionTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionTableItemProvider actionTableItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.ActionTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionTableAdapter() {
		if (actionTableItemProvider == null) {
			actionTableItemProvider = new ActionTableItemProvider(this);
		}

		return actionTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.Decision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionItemProvider decisionItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.Decision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionAdapter() {
		if (decisionItemProvider == null) {
			decisionItemProvider = new DecisionItemProvider(this);
		}

		return decisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.DecisionEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionEntryItemProvider decisionEntryItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.DecisionEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionEntryAdapter() {
		if (decisionEntryItemProvider == null) {
			decisionEntryItemProvider = new DecisionEntryItemProvider(this);
		}

		return decisionEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.ContainableTruthTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainableTruthTableItemProvider containableTruthTableItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.ContainableTruthTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainableTruthTableAdapter() {
		if (containableTruthTableItemProvider == null) {
			containableTruthTableItemProvider = new ContainableTruthTableItemProvider(this);
		}

		return containableTruthTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.TruthTableChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TruthTableChartItemProvider truthTableChartItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.TruthTableChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTruthTableChartAdapter() {
		if (truthTableChartItemProvider == null) {
			truthTableChartItemProvider = new TruthTableChartItemProvider(this);
		}

		return truthTableChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.ActionEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionEntryItemProvider actionEntryItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.ActionEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionEntryAdapter() {
		if (actionEntryItemProvider == null) {
			actionEntryItemProvider = new ActionEntryItemProvider(this);
		}

		return actionEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.InputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputDataItemProvider inputDataItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.InputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputDataAdapter() {
		if (inputDataItemProvider == null) {
			inputDataItemProvider = new InputDataItemProvider(this);
		}

		return inputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.OutputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDataItemProvider outputDataItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.OutputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDataAdapter() {
		if (outputDataItemProvider == null) {
			outputDataItemProvider = new OutputDataItemProvider(this);
		}

		return outputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.LocalData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalDataItemProvider localDataItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.LocalData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalDataAdapter() {
		if (localDataItemProvider == null) {
			localDataItemProvider = new LocalDataItemProvider(this);
		}

		return localDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.BlockReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockReferenceItemProvider blockReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.BlockReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockReferenceAdapter() {
		if (blockReferenceItemProvider == null) {
			blockReferenceItemProvider = new BlockReferenceItemProvider(this);
		}

		return blockReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.SFWTrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SFWTriggerItemProvider sfwTriggerItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.SFWTrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSFWTriggerAdapter() {
		if (sfwTriggerItemProvider == null) {
			sfwTriggerItemProvider = new SFWTriggerItemProvider(this);
		}

		return sfwTriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.ets.sofeess.breesse.simulink.ModelReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelReferenceItemProvider modelReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link ca.ets.sofeess.breesse.simulink.ModelReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelReferenceAdapter() {
		if (modelReferenceItemProvider == null) {
			modelReferenceItemProvider = new ModelReferenceItemProvider(this);
		}

		return modelReferenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (simulinkModelItemProvider != null) simulinkModelItemProvider.dispose();
		if (blockItemProvider != null) blockItemProvider.dispose();
		if (inPortItemProvider != null) inPortItemProvider.dispose();
		if (outPortItemProvider != null) outPortItemProvider.dispose();
		if (subSystemItemProvider != null) subSystemItemProvider.dispose();
		if (inPortBlockItemProvider != null) inPortBlockItemProvider.dispose();
		if (outPortBlockItemProvider != null) outPortBlockItemProvider.dispose();
		if (connectionItemProvider != null) connectionItemProvider.dispose();
		if (chartItemProvider != null) chartItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (junctionItemProvider != null) junctionItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (sfwGuardItemProvider != null) sfwGuardItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (conditionTableItemProvider != null) conditionTableItemProvider.dispose();
		if (actionTableItemProvider != null) actionTableItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (decisionItemProvider != null) decisionItemProvider.dispose();
		if (decisionEntryItemProvider != null) decisionEntryItemProvider.dispose();
		if (containableTruthTableItemProvider != null) containableTruthTableItemProvider.dispose();
		if (truthTableChartItemProvider != null) truthTableChartItemProvider.dispose();
		if (actionEntryItemProvider != null) actionEntryItemProvider.dispose();
		if (inputDataItemProvider != null) inputDataItemProvider.dispose();
		if (outputDataItemProvider != null) outputDataItemProvider.dispose();
		if (localDataItemProvider != null) localDataItemProvider.dispose();
		if (blockReferenceItemProvider != null) blockReferenceItemProvider.dispose();
		if (sfwTriggerItemProvider != null) sfwTriggerItemProvider.dispose();
		if (modelReferenceItemProvider != null) modelReferenceItemProvider.dispose();
	}

}
